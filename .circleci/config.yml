# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Holm Hinrichs
defaults: &nodeEnv
  docker:
    - image: circleci/node:14-browsers

# Commands for rollback needed
commands:
  prepare-angular-cli:
    steps:
      - run:
          name: install dependencies
          command: |
            sudo npm install -g @angular/cli@latest  > /dev/null
            npm install --save-dev @angular-devkit/build-angular
            npm install @angular/compiler-cli
            npm install @angular/compiler
            ng analytics off


  prepare-aws:
    steps:
      - run:
          name: install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:
  build-app:
    <<: *nodeEnv
    steps:
      - checkout
      - prepare-angular-cli
      - run:
          name: build angular
          command: |
            cd capstone
            sudo npm link > /dev/null
            ng build

  test-app:
    <<: *nodeEnv
    steps:
      - checkout
      - prepare-angular-cli
      - run:
          name: build angular
          command: |
            cd capstone
            sudo npm link > /dev/null
            ng test --no-watch --no-progress --browsers=ChromeHeadlessCI

  lint-app:
    <<: *nodeEnv
    steps:
      - checkout
      - prepare-angular-cli
      - run:
          name: build angular
          command: |
            cd capstone
            sudo npm link > /dev/null
            ng lint

  push-docker:
    <<: *nodeEnv
    steps:
      - checkout
      - prepare-angular-cli
      - prepare-aws
      - run:
          name: build app
          command: |
            cd capstone
            sudo npm link > /dev/null
            ng build
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: create Image
          command: |
            cp Docker/Dockerfile capstone/dist/capstone
            cd capstone/dist/capstone
            docker build . -t capstone21:latest
      - run:
          name: push to ecr
          command: |
            aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 188794860952.dkr.ecr.eu-central-1.amazonaws.com
            docker tag capstone21:latest 188794860952.dkr.ecr.eu-central-1.amazonaws.com/capstone:latest
            docker push 188794860952.dkr.ecr.eu-central-1.amazonaws.com/capstone:latest

  check-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: check if cluster exists
          # if cluster not exists it will create a new one, this is normally not required as we ase the cluster is there and just shows that it can also be created from circlCI!
          command: |
            bash cloud/infrastructure/infra_check.sh
  # deploy the new image to the EKS Cluster using kube deployment
  deploy-to-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: deploy app via kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws eks --region eu-central-1 update-kubeconfig --name ${CLUSTER_NAME}
            echo "Deploy applicatiopn to cluster!"
            sed "s/capstone-deployment/capstone-deployment$CIRCLE_BUILD_NUM/g" cloud/deployment/deployment.yaml > cloud/deployment/deployment_temp.yaml
            kubectl apply -f cloud/deployment/deployment_temp.yaml
      - run:
          name: deploy loadbalancer to deployment
          command: |
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl expose deployment capstone-deployment$CIRCLE_BUILD_NUM  --type=LoadBalancer  --name=capstone-service-loadbalancer-$CIRCLE_BUILD_NUM
            kubectl get service
      - run:
          name: get LoadBalancer address
          command: |
            sleep 60
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            lb_url=$(kubectl get svc capstone-service-loadbalancer-$CIRCLE_BUILD_NUM --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "External Address is $lb_url"
            curl -H "Content-Type: text/plain" -H "token: a9a786e3-df62-453d-8bd5-36b0d69f8c0e" --request PUT --data $lb_url https://api.memstash.io/values/url

  smoketest:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command:
            apk add --update curl
      - run:
          name: Smoke test.
          command: |
            sleep 20
            URL=$(curl -H "token: a9a786e3-df62-453d-8bd5-36b0d69f8c0e" --request GET https://api.memstash.io/values/url)
            if curl -s ${URL} | grep "Capstone"
              then
            echo "Okay"
            return 0
              else
            echo "URL Not Reachable!"
            return 0
            fi

  switch-url:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
            URL=${curl -H "token: a9a786e3-df62-453d-8bd5-36b0d69f8c0e" --request GET https://api.memstash.io/values/url}
            echo "switching URL to: ${URL}"
            aws cloudformation update-stack --stack-name capstone21-cf --template-body file://infrastructure/cloudFront.yaml --parameters ParameterKey=LoadBalancerURL,ParameterValue=a42bb2fbb96d5439b863b8848d31835f-543710054.eu-central-1.elb.amazonaws.com


 # clean-up:
 #   docker:
 #     - image: amazon/aws-cli
 #     steps:
 #       - checkout
 #       - run:
  #          name: deploy app via kubectl
  ##          command: |
  #            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
  #            chmod +x ./kubectl
  #            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
   #           echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
   #           aws eks --region eu-central-1 update-kubeconfig --name ${CLUSTER_NAME}
   #           kubectl get deploy awk '/capstone/{print $1}' |  awk '!/capstone-deployment$CIRCLE_BUILD_NUM/{print $1}' | xargs  kubectl delete deploy


# Orchestrate or schedule a set of jobs
workflows:
  capstone:
    jobs:
      - build-app
      - test-app
      - lint-app
      - push-docker:
          requires: [build-app, test-app, lint-app]
      - check-cluster
      - deploy-to-cluster:
          requires: [check-cluster]
      - smoketest:
          requires: [deploy-to-cluster]
      - switch-url:
          requires: [smoketest]


